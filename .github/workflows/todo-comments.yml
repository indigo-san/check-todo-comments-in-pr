name: Check TODO Comments

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  find-todo-comments:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get PR diff
      id: diff
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git diff origin/${{ github.event.pull_request.base.ref }} -U0 --diff-filter=AM -- '*.cs' | awk '
          /^diff --git a\/.* b\/.*/ {
              filename = substr($0, 14)
              sub(/^a\//, "", filename)
              sub(/ b\/.*/, "", filename)
          }
          /^@@ / {
              split($0, arr, /[@+, -]+/)
              start_line = arr[3]
          }
          /^\+/ && !/^\+\+\+/ {
              print filename ":" start_line ":" substr($0, 2)
              start_line++
          }
          ' > diff.txt

    - name: Extract TODO comments
      uses: actions/github-script@v4
      with:
        script: |
          const fs = require('fs');
          const diff = fs.readFileSync('diff.txt', 'utf8');
          const todoRegex = /TODO/g;
          const startRegex = /\/\*/g;
          const endRegex = /\*\//g;
          const todos = [];
          const lines = diff.split('\n');
          let inTodoBlock = false;
          let todoStartLine = 0;
          let todoEndLine = 0;
          let todoContent = [];
          let multiLineComment = false;
          let currentFile = '';

          lines.forEach((line, index) => {
            const [fileName, lineNumber, ...content] = line.split(':');
            if(fileName !== currentFile && currentFile) {
              todos.push({
                startLine: todoStartLine,
                endLine: todoEndLine,
                content: todoContent.join('\n'),
                fileName: currentFile
              });
              multiLineComment = false;
              todoContent = [];
            }
            currentFile = fileName;

            const lineContent = content.join(':');
            if (startRegex.test(lineContent)) {
              multiLineComment = true;
            }

            if (endRegex.test(lineContent)) {
              multiLineComment = false;
              if (inTodoBlock) {
                inTodoBlock = false;
                todos.push({
                  startLine: todoStartLine,
                  endLine: parseInt(lineNumber),
                  content: todoContent.join('\n'),
                  fileName: currentFile
                });
                todoContent = [];
              }
              return;
            }

            if (todoRegex.test(lineContent)) {
              if (!inTodoBlock) {
                inTodoBlock = true;
                todoStartLine = parseInt(lineNumber);
              }
              todoEndLine = parseInt(lineNumber);
              todoContent.push(lineContent);
            } else if (inTodoBlock && (lineContent.trim().startsWith("//") || multiLineComment)) {
              todoEndLine = parseInt(lineNumber);
              todoContent.push(lineContent);
            } else if (inTodoBlock) {
              inTodoBlock = false;
              todos.push({
                startLine: todoStartLine,
                endLine: todoEndLine,
                content: todoContent.join('\n'),
                fileName: currentFile
              });
              todoContent = [];
            }
          });

          if (inTodoBlock && currentFile) {
            todos.push({
              startLine: todoStartLine,
              endLine: todoEndLine,
              content: todoContent.join('\n'),
              fileName: currentFile
            });
          }

          fs.writeFileSync('todos.json', JSON.stringify(todos));

    - name: Comment on PR
      uses: actions/github-script@v4
      with:
        script: |
          const fs = require('fs');
          const todos = JSON.parse(fs.readFileSync('todos.json', 'utf8'));
          if (todos) {
            const commentBody = todos.map(item => {
              return `https://github.com/${{ github.repository }}/blob/${{ github.sha }}/${item.fileName}#L${item.startLine}-L${item.endLine}`;
            }).join('\n');
            const {owner, repo} = process.env;
            github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `以下のTODOコメントが見つかりました:\n\n${commentBody}`
            });
          }